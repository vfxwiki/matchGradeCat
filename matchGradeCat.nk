set cut_paste_input [stack 0]
version 15.1 v5
push 0
push $cut_paste_input
Group {
inputs 2
name MatchGradeCat4
selected true
xpos 42922
ypos -3233
addUserKnob {20 User l MatchGradeCat}
addUserKnob {41 output_group l output T Switch1.output_group}
addUserKnob {41 modelFile l "Inference Model File" T Inference.modelFile}
addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T Inference.useGPUIfAvailable}
addUserKnob {41 halfPrecision l "Optimize for Speed and Memory" -STARTLINE T Inference.halfPrecision}
addUserKnob {26 ""}
addUserKnob {41 first_frame l "frame range to avg." t "The frame range is the frames used to predict the CDL values, that will then be averaged out." T FrameRange1.first_frame}
addUserKnob {41 last_frame_1 l "" -STARTLINE T FrameRange1.last_frame}
addUserKnob {41 reset -STARTLINE T FrameRange1.reset}
addUserKnob {41 create_cdl l "Create CDL Values" T Ctrl.create_cdl}
addUserKnob {41 exportCDLnode l "Export CDL node" -STARTLINE T Ctrl.exportCDLnode}
addUserKnob {41 copyModelFile l "Set Inference" -STARTLINE T Ctrl.copyModelFile}
addUserKnob {26 ""}
addUserKnob {41 slope T OCIOCDLTransform.slope}
addUserKnob {41 On l "" -STARTLINE T Multiply.On}
addUserKnob {41 offset T OCIOCDLTransform.offset}
addUserKnob {41 On_1 l "" -STARTLINE T Plus.On}
addUserKnob {41 power T OCIOCDLTransform.power}
addUserKnob {41 On_2 l "" -STARTLINE T MergeExpressionPow.On}
addUserKnob {41 saturation T OCIOCDLTransform.saturation}
addUserKnob {41 export_cc l "export grade as .cc" T OCIOCDLTransform.export_cc}
addUserKnob {26 "" l " "}
addUserKnob {20 train l Train}
addUserKnob {41 firstFrame l "Source frame" T FrameHoldSource.firstFrame}
addUserKnob {41 setToCurrentFrame l "Set to Current Frame" -STARTLINE T FrameHoldSource.setToCurrentFrame}
addUserKnob {41 firstFrame_1 l "Target frame" T FrameHoldTarget.firstFrame}
addUserKnob {41 setToCurrentFrame_1 l "Set to Current Frame" -STARTLINE T FrameHoldTarget.setToCurrentFrame}
addUserKnob {41 last_frame l "train frames" t "this is the amount of random grades the model will be trained on - this increases caching time" T FrameRange2.last_frame}
addUserKnob {41 maxSlp l "max Slope (mult)" t "When training this is the maximum  +/- value that this will be used." T OCIOCDLTransformSAW.maxSlp}
addUserKnob {41 maxOffset l "max Offset" t "When training this is the maximum  +/- value that this will be used." T OCIOCDLTransformSAW.maxOffset}
addUserKnob {41 maxPower l "max Power" t "When training this is the maximum  +/- value that this will be used." T OCIOCDLTransformSAW.maxPower}
addUserKnob {26 ""}
addUserKnob {41 dataDirectory l "Data Directory" T CopyCatGrade.dataDirectory}
addUserKnob {41 checkpointFile l "Checkpoint File" T CopyCatGrade.checkpointFile}
addUserKnob {41 epochs l Epochs t "if this is too high you will 'overfit' the data to the model!" T CopyCatGrade.epochs}
addUserKnob {41 batchSizeType l "Batch Size" T CopyCatGrade.batchSizeType}
addUserKnob {41 batchSize l "" -STARTLINE T CopyCatGrade.batchSize}
addUserKnob {26 txt_1 l " " T "<b> set output to 'CDL' not 'liveCat' when training to avoid crashing and slow caching"}
addUserKnob {41 startTraining l "Start Training" T CopyCatGrade.startTraining}
addUserKnob {41 resumeTraining l "Resume Training" -STARTLINE T CopyCatGrade.resumeTraining}
addUserKnob {20 Graph n 1}
Graph 0
addUserKnob {41 logScale l "Log Scale" T CopyCatGrade.logScale}
addUserKnob {41 smoothness l Smoothness T CopyCatGrade.smoothness}
addUserKnob {41 showOriginal l "Show Original Curve" T CopyCatGrade.showOriginal}
addUserKnob {41 chart l "" -STARTLINE T CopyCatGrade.chart}
addUserKnob {20 "" n -1}
addUserKnob {20 contact_group l "Contact Sheet" n 1}
contact_group 0
addUserKnob {41 overlay l "" -STARTLINE T CopyCatGrade.overlay}
addUserKnob {20 "" n -1}
addUserKnob {20 preview_group l Preview n 1}
preview_group 0
addUserKnob {41 preview l "" -STARTLINE T CopyCatGrade.preview}
addUserKnob {20 "" n -1}
addUserKnob {20 tab l info}
addUserKnob {26 ver l ver. T "0.1b - 24/04/24 beta init by <a href='https://movingimagearts.com'> Rafal Kaniewski</a> <br>\n0.2b - 23/02/25 on/off added to slope/offset/pow & size of frame for inference"}
addUserKnob {26 link_docs l docs: T " <a href='https://github.com/vfxwiki/matchGradeCat/wiki'> Github.com</a>"}
addUserKnob {26 link_source l source: T "<a href='https://github.com/vfxwiki/matchGradeCat'> Github.com</a>"}
addUserKnob {26 txt l Notes}
addUserKnob {26 notes l "" +STARTLINE T "On Train tab\n* Select two frames for your source and target. (these do not act as \n    source/target when training, but just are two images that are \n    different in your sequence i.e. wideshot and closeup)\n* select the max required range of CDL dlope/offset/power values\n* Create a data directory folder\n* Dowload an inference model file checkpoint from source link above and\n   add the path to 'Checkpoint File'\n* Click start training (you will need an OK GPU)\n\nOn the main tab:\n* Add the Cat you have just made to the 'Inference Model File' path\n* Set the frame range that you will use from the source to generate the CDL\n* Click Create CDL\n\nTip: make sure the 'Inference Model File' path is not the same as the data\n directory folder as caching takes longer (on windows)"}
}
Input {
inputs 0
name Source
xpos 1030
ypos -781
number 1
}
Dot {
name Dot2
xpos 1064
ypos -564
}
set Nb63e4000 [stack 0]
OCIOCDLTransform {
slope {1.1680509 1.563752794 1.318953258}
offset {0.03372373721 0.03571506934 0.01675011916}
power {0.9957496673 1.067006718 1.036868376}
working_space scene_linear
name OCIOCDLTransform
xpos 1272
ypos 512
}
push $Nb63e4000
Input {
inputs 0
name Target
xpos 764
ypos -774
}
Dot {
name Dot3
xpos 798
ypos -600
}
set Nb63e5000 [stack 0]
add_layer {graded graded.red graded.green graded.blue}
AddChannels {
channels graded
name AddChannels1
xpos 764
ypos -292
}
Shuffle2 {
inputs 2
fromInput1 {{0} B A}
out1 graded
fromInput2 {{1} B A}
in2 rgb
out2 rgb
mappings "6 rgba.red 0 0 graded.red 0 0 rgba.green 0 1 graded.green 0 1 rgba.blue 0 2 graded.blue 0 2 rgba.red 1 0 rgba.red 1 0 rgba.green 1 1 rgba.green 1 1 rgba.blue 1 2 rgba.blue 1 2"
name Shuffle1
xpos 825
ypos -211
}
FrameRange {
first_frame 1001
last_frame 1002
time ""
name FrameRange1
xpos 825
ypos -169
}
Blur {
size 1.75
quality 30
name Blur2
xpos 825
ypos -122
}
Reformat {
format "32 32 0 0 32 32 1 square_32"
resize fill
filter impulse
name Reformat4
xpos 825
ypos -67
}
Clamp {
minimum_enable false
maximum 5
name Clamp8
xpos 825
ypos -19
}
Grade {
channels all
blackpoint -0.2
white 0.2
black_clamp false
name Grade3
xpos 825
ypos 17
}
Clamp {
name Clamp7
xpos 825
ypos 53
}
Inference {
modelFile D:/Home/Downloads/matchGradeCat-main/checkpoint02/Training_240425_225133.545454.cat
serialiseKnob {}
name Inference
xpos 831
ypos 137
}
Reformat {
type "to box"
box_width 1
box_height 1
box_fixed true
name Reformat1
xpos 831
ypos 161
}
Clamp {
name Clamp10
xpos 831
ypos 221
}
Grade {
channels all
white 0.2
reverse true
black_clamp false
name Grade4
xpos 831
ypos 253
}
Clamp {
minimum_enable false
maximum 5
name Clamp11
xpos 831
ypos 289
}
add_layer {cdlOffset cdlOffset.red cdlOffset.green cdlOffset.blue}
Add {
channels cdlOffset
value -1
name Add2
xpos 831
ypos 325
}
add_layer {cdlSlope cdlSlope.red cdlSlope.green cdlSlope.blue}
Shuffle2 {
fromInput1 {{0} B}
in1 cdlSlope
out1 rgb
fromInput2 {{0} B}
mappings "3 cdlSlope.red 0 0 rgba.red 0 0 cdlSlope.green 0 1 rgba.green 0 1 cdlSlope.blue 0 2 rgba.blue 0 2"
name Shuffle4
xpos 831
ypos 401
}
Rectangle {
output rgb
area {0 0 {width} {height}}
color {{"\[sample this.input r (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input g (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input b (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} 0}
name RectangleSlope
xpos 831
ypos 425
}
set Nb50f6c00 [stack 0]
Shuffle2 {
fromInput1 {{0} B}
in1 cdlOffset
out1 rgb
fromInput2 {{0} B}
mappings "3 cdlOffset.red 0 0 rgba.red 0 0 cdlOffset.green 0 1 rgba.green 0 1 cdlOffset.blue 0 2 rgba.blue 0 2"
name Shuffle5
xpos 831
ypos 473
}
Rectangle {
output rgb
area {0 0 {width} {height}}
color {{"\[sample this.input r (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input g (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input b (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} 0}
name RectangleOffset
xpos 831
ypos 497
}
set Nb50f7400 [stack 0]
add_layer {cdlPower cdlPower.red cdlPower.green cdlPower.blue}
Shuffle2 {
fromInput1 {{0} B}
in1 cdlPower
out1 rgb
fromInput2 {{0} B}
mappings "3 cdlPower.red 0 0 rgba.red 0 0 cdlPower.green 0 1 rgba.green 0 1 cdlPower.blue 0 2 rgba.blue 0 2"
name ShufflePower
xpos 831
ypos 542
}
Rectangle {
output rgb
area {0 0 {width} {height}}
color {{"\[sample this.input r (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input g (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} {"\[sample this.input b (input.width/2) (input.height/2) (input.width/2) (input.height/2)]"} 0}
name RectanglePower
xpos 831
ypos 566
}
set Nb50f7c00 [stack 0]
push $Nb50f7400
push $Nb50f6c00
push $Nb63e4000
Dot {
name Dot4
xpos 1097
ypos 360
}
Merge2 {
inputs 2
operation multiply
Achannels rgb
Bchannels rgb
output rgb
name Multiply
xpos 1063
ypos 425
disable {{!On}}
addUserKnob {20 User}
addUserKnob {6 On l "" +STARTLINE +STARTLINE}
On true
}
Merge2 {
inputs 2
operation plus
Achannels rgb
Bchannels rgb
output rgb
name Plus
xpos 1063
ypos 497
disable {{!On}}
addUserKnob {20 User}
addUserKnob {6 On l "" +STARTLINE +STARTLINE}
}
MergeExpression {
inputs 2
expr0 pow(Br,Ar)
expr1 pow(Bg,Ag)
expr2 pow(Bb,Ab)
channel3 {none none none -rgba.alpha}
name MergeExpressionPow
xpos 1063
ypos 566
disable {{!On}}
addUserKnob {20 User}
addUserKnob {6 On l "" +STARTLINE +STARTLINE}
On true
}
Switch {
inputs 2
which {{output_group i}}
name Switch1
xpos 1178
ypos 601
addUserKnob {20 User}
addUserKnob {68 output_group l output M {"LiveCat\t" CDL}}
}
Output {
name Output1
xpos 1178
ypos 654
}
push $Nb50f7400
CurveTool {
ROI {0 0 2048 1556}
autocropdata {512 389 1536 1167}
intensitydata {{curve i x114 0 x1001 0.03372120112 x1002 0.03372469917} {curve i x114 0 x1001 0.03569639847 x1002 0.03573289886} {curve i x114 0 x1001 0.01675380021 x1002 0.01674430072} {curve i x114 0}}
name CurveTool_offset
xpos 633
ypos 497
addUserKnob {20 User}
addUserKnob {18 avg_curve}
avg_curve {{"intensitydata.r.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.g.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.b.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i}}
addUserKnob {6 avg_curve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 avgCurve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
push $Nb50f7c00
CurveTool {
ROI {0 0 2048 1556}
autocropdata {512 389 1536 1167}
intensitydata {{curve i x114 0 x1001 0.995751977 x1002 0.9957460165} {curve i x114 0 x1001 1.067029953 x1002 1.066969991} {curve i x114 0 x1001 1.036880016 x1002 1.036849976} {curve i x114 0}}
name CurveTool_power
xpos 635
ypos 559
addUserKnob {20 User}
addUserKnob {18 avg_curve}
avg_curve {{"intensitydata.r.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.g.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.b.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i}}
addUserKnob {6 avg_curve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 avgCurve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
push $Nb50f6c00
CurveTool {
ROI {0 0 2048 1556}
autocropdata {512 389 1536 1167}
intensitydata {{curve x114 0 x1001 1.168140054 x1002 1.16790998} {curve x114 0 x1001 1.563470006 x1002 1.563860059} {curve x114 0 x1001 1.318830013 x1002 1.319000006} {curve x114 0}}
name CurveTool_slope
xpos 625
ypos 425
addUserKnob {20 User}
addUserKnob {18 avg_curve}
avg_curve {{"intensitydata.r.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.g.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i} {"intensitydata.b.integrate( Ctrl.frame_in,Ctrl.frame_out)/(Ctrl.frame_out-Ctrl.frame_in)" i}}
addUserKnob {6 avg_curve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 avgCurve_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
push $Nb63e5000
FrameHold {
firstFrame 1001
name FrameHoldTarget
xpos 2010
ypos -389
}
FrameRange {
first_frame {{FrameRange2.knob.last_frame/2+1}}
last_frame {{FrameRange2.knob.last_frame}}
time ""
name FrameRange6
xpos 2036
ypos -300
}
push $Nb63e4000
FrameHold {
firstFrame 1001
name FrameHoldSource
xpos 1899
ypos -348
}
FrameRange {
first_frame 1
last_frame {{FrameRange2.knob.last_frame/2 x1001 100}}
time ""
name FrameRange5
xpos 1899
ypos -300
}
AppendClip {
inputs 2
meta_from_first false
time ""
name AppendClip1
xpos 1947
ypos -168
}
FrameRange {
first_frame 1
last_frame 3000
time ""
name FrameRange2
xpos 1947
ypos -144
}
Crop {
box {{int(random(frame+Ctrl.seed+1)*35)*32} {int(random(frame+Ctrl.seed+1)*35)*32} {int(random(frame+Ctrl.seed+1)*35)*32+32} {int(random(frame+Ctrl.seed+1)*35)*32+32}}
reformat true
crop false
name Crop2
xpos 1947
ypos -104
}
Reformat {
format "32 32 0 0 32 32 1 square_32"
resize none
black_outside true
name Reformat8
xpos 1947
ypos -67
}
Blur {
channels rgb
size 1.75
quality 30
name Blur1
xpos 1947
ypos -9
}
AddChannels {
channels graded
name AddChannels3
xpos 1947
ypos 60
}
Shuffle2 {
fromInput1 {{0} B}
out1 graded
fromInput2 {{0} B}
mappings "3 rgba.red 0 0 graded.red 0 0 rgba.green 0 1 graded.green 0 1 rgba.blue 0 2 graded.blue 0 2"
name Shuffle2
xpos 1947
ypos 117
}
OCIOCDLTransform {
channels graded
slope {{slopeMode==1||slopeMode==4?random(seed,frame)>0.5?((random(seed,frame)-0.5)*2)*(maxSlp-1)+1:1/((((random(seed,frame)-0.5)*2)*(maxSlp-1)*-1)+1):1} {slopeMode==1||slopeMode==4?random(seed+1,frame)>0.5?((random(seed+1,frame)-0.5)*2)*(maxSlp-1)+1:1/((((random(seed+1,frame)-0.5)*2)*(maxSlp-1)*-1)+1):1} {slopeMode==1||slopeMode==4?random(seed+2,frame)>0.5?((random(seed+2,frame)-0.5)*2)*(maxSlp-1)+1:1/((((random(seed+2,frame)-0.5)*2)*(maxSlp-1)*-1)+1):1}}
offset {{powerMode==1?((random(seed+5,frame)-0.5)*2)*(maxOffset-1):0} {powerMode==1?((random(seed+4,frame)-0.5)*2)*(maxOffset-1):0} {powerMode==1?((random(seed+3,frame)-0.5)*2)*(maxOffset-1):0}}
power {{powerMode==1?random(seed+6,frame)>0.5?((random(seed+6,frame)-0.5)*2)*(maxPower-1)+1:1/((((random(seed+6,frame)-0.5)*2)*(maxPower-1)*-1)+1):1} {powerMode==1?random(seed+7,frame)>0.5?((random(seed+7,frame)-0.5)*2)*(maxPower-1)+1:1/((((random(seed+7,frame)-0.5)*2)*(maxPower-1)*-1)+1):1} {powerMode==1?random(seed+8,frame)>0.5?((random(seed+8,frame)-0.5)*2)*(maxPower-1)+1:1/((((random(seed+8,frame)-0.5)*2)*(maxPower-1)*-1)+1):1}}
working_space scene_linear
name OCIOCDLTransformSAW
xpos 1947
ypos 166
addUserKnob {20 User}
addUserKnob {3 seed}
seed {{Ctrl.seed}}
addUserKnob {7 maxSlp R 1 5}
maxSlp 2
addUserKnob {3 slopeMode -STARTLINE}
slopeMode {{random(frame+Ctrl.seed+75)>.1}}
addUserKnob {7 maxOffset R 1 3}
maxOffset 1.05
addUserKnob {3 offsetMode -STARTLINE}
offsetMode {{(random(frame+Ctrl.seed))>0.7}}
addUserKnob {7 maxPower R 1 3}
maxPower 1.05
addUserKnob {3 powerMode -STARTLINE}
powerMode {{(random(frame+Ctrl.seed+1))>0.7}}
}
set Nb5193c00 [stack 0]
AddChannels {
channels cdlSlope
channels2 cdlPower
channels3 cdlOffset
name AddChannels2
xpos 1947
ypos 255
}
Remove {
operation keep
channels cdlSlope
channels2 cdlPower
channels3 cdlOffset
name Remove3
xpos 1947
ypos 308
}
Expression {
channel0 {cdlSlope.red -cdlSlope.green -cdlSlope.blue}
expr0 OCIOCDLTransformSAW.slope.r
channel1 {-cdlSlope.red cdlSlope.green -cdlSlope.blue}
expr1 OCIOCDLTransformSAW.slope.g
channel2 {-cdlSlope.red -cdlSlope.green cdlSlope.blue}
expr2 OCIOCDLTransformSAW.slope.b
channel3 {none none none -rgba.alpha}
name ExpressionSlope
xpos 1947
ypos 363
}
Expression {
channel0 {cdlPower.red -cdlPower.green -cdlPower.blue}
expr0 (OCIOCDLTransformSAW.power.r)
channel1 {-cdlPower.red cdlPower.green -cdlPower.blue}
expr1 (OCIOCDLTransformSAW.power.g)
channel2 {-cdlPower.red -cdlPower.green cdlPower.blue}
expr2 (OCIOCDLTransformSAW.power.b)
channel3 {none none none -rgba.alpha}
name ExpressionPower
xpos 1947
ypos 390
}
Expression {
channel0 {cdlOffset.red -cdlOffset.green -cdlOffset.blue}
expr0 OCIOCDLTransformSAW.offset.r+1
channel1 {-cdlOffset.red cdlOffset.green -cdlOffset.blue}
expr1 OCIOCDLTransformSAW.offset.g+1
channel2 {-cdlOffset.red -cdlOffset.green cdlOffset.blue}
expr2 OCIOCDLTransformSAW.offset.b+1
channel3 {none none none -rgba.alpha}
name ExpressionOffset
xpos 1947
ypos 414
}
Grade {
channels all
white 0.2
white_clamp true
name Grade2
xpos 1947
ypos 438
}
Clamp {
name Clamp2
xpos 1947
ypos 493
}
push $Nb5193c00
Dot {
name Dot1
xpos 1801
ypos 233
}
Remove {
operation keep
channels rgb
channels2 graded
name Remove1
xpos 1767
ypos 298
}
Clamp {
minimum_enable false
maximum 5
name Clamp5
xpos 1767
ypos 322
}
Grade {
channels all
blackpoint -0.2
white 0.2
black_clamp false
name Grade1
xpos 1767
ypos 460
}
Clamp {
name Clamp3
xpos 1767
ypos 559
}
CopyCat {
inputs 2
epochs 150
totalSteps 8181
Advanced 1
initialWeights Checkpoint
batchSizeType Manual
autoBatchSize 512
batchSize 55
cropSize 32
useMultiResolution false
logScale true
smoothness 0.26
showOriginal false
name CopyCatGrade
xpos 1947
ypos 589
}
NoOp {
inputs 0
name Ctrl
xpos 1371
ypos 102
addUserKnob {20 User}
addUserKnob {3 seed}
seed 2
addUserKnob {22 create_cdl l "Create CDL" T "import nuke\n\ndef runCurves(node_from, knob_to):\n    node_from = nuke.toNode(node_from)\n    frame_in = int(nodeCtrl.knob('frame_in').value())\n    frame_out = int(nodeCtrl.knob('frame_out').value())\n    nuke.execute(node_from, frame_in, frame_out)\n    r, g, b = node_from.knob('avg_curve').value()\n    node_to.knob(knob_to).setValue(\[r, g, b])\n\ndef set_knob_value(node, knob_name, value):\n    knob = node\[knob_name]\n    #knob.clearAnimated()\n    for curve in knob.animations():\n        curve.clear()\n    knob.setValue(value)\n\nnodeCtrl = nuke.toNode('Ctrl')\nnode_to = nuke.toNode('OCIOCDLTransform')\n\nfor x in \['slope', 'offset', 'power']:\n    node_c = nuke.toNode('CurveTool_' + x)\n    set_knob_value(node_c, 'intensitydata', 0)\n\nif nodeCtrl and node_to:\n    for x in \['slope', 'offset', 'power']:\n        runCurves('CurveTool_' + x, x)\nelse:\n    nuke.message(\"Error: 'Ctrl' or 'OCIOCDLTransform' node not found.\")\n\n\n" +STARTLINE}
addUserKnob {22 exportCDLnode l "export CDL node" -STARTLINE T "node_to = nuke.toNode('OCIOCDLTransform')  \n\nwith nuke.toNode('.'.join(\['root'] + nuke.thisNode().fullName().split('.')\[:-2])):\n newNode = nuke.createNode(node_to.Class(), node_to.writeKnobs(nuke.TO_SCRIPT | nuke.WRITE_NON_DEFAULT_ONLY)) "}
addUserKnob {22 copyModelFile l "Set Inference" T "import nuke\n\ndef copy_and_paste_knob_value(source_node, source_knob_name, target_node, target_knob_name):\n    source_knob = source_node\[source_knob_name]\n    target_knob = target_node\[target_knob_name]\n    if source_knob and target_knob:\n        target_knob.setValue(source_knob.value())\n\nto_inference_grade_node = nuke.toNode( 'Inference')\n\ncopycat_grade_node = nuke.toNode('CopyCatGrade')\ncopycat_grade_node.showControlPanel()\n\ncopycat_grade_node\['createInference'].execute()\ncopycat_grade_node.hideControlPanel()\ntempInferance = nuke.selectedNode()\t\n\ncopy_and_paste_knob_value(tempInferance, 'modelFile', to_inference_grade_node, 'modelFile')\nnuke.delete(tempInferance)\n" +STARTLINE}
addUserKnob {3 frame_in}
frame_in {{parent.FrameRange1.knob.first_frame}}
addUserKnob {3 frame_out l "" -STARTLINE}
frame_out {{parent.FrameRange1.knob.last_frame}}
}
end_group

